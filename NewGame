#include <stdio.h>
#include <windows.h>
#include <conio.h>
#include <string.h>

#define Up 72
#define Down 80
#define Left 75
#define Right 77
#define Esc 27
#define Backspace 8

struct SCORE
{
    int NumOfPieces;
    int Score;
    int TotalScore;
};

typedef struct SCORE SCORE;

void clear()
{
    system("cls");
}

void gotoxy(double x, int y)
{
    COORD coord;
    coord.X = 4 * x + 44;
    coord.Y = 2 * y + 5;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

int RotatePieces_Score(char pieces[8][8], int j, int i)
{
    int score = 0;

    char turn = pieces[j][i];
    char opponent = (turn == 'B') ? 'W' : 'B';

    int row = 1;
    int column = 1;
    for (int k = 0; k < 8; k++)
    {
        int x = j;
        int y = i;
        int temp = 0;
        do
        {
            x += row;
            y += column;
            temp++;

        } while (pieces[x][y] == opponent && 0 <= x && x <= 7 && 0 <= y && y <= 7);

        if (pieces[x][y] == turn && temp != 1 && 0 <= x && x <= 7 && 0 <= y && y <= 7)
        {
            x -= row;
            y -= column;
            do
            {
                pieces[x][y] = turn;
                score++;
                x -= row;
                y -= column;

            } while (pieces[x][y] == opponent);
        }

        if (k < 2)
        {
            row--;
        }
        else if (k < 4)
        {
            column--;
        }
        else if (k < 6)
        {
            row++;
        }
        else
        {
            column++;
        }
    }

    return score;
}

void LegalMoves(char pieces[8][8], char turn)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            if (pieces[j][i] == 'o')
            {
                pieces[j][i] = ' ';
            }
        }
    }
    char opponent = (turn == 'B') ? 'W' : 'B';
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            if (pieces[j][i] == turn)
            {
                int row = 1;
                int column = 1;

                for (int k = 0; k < 8; k++)
                {
                    int x = j;
                    int y = i;
                    int temp = 0;
                    do
                    {
                        x += row;
                        y += column;
                        temp++;

                    } while (pieces[x][y] == opponent && 0 <= x && x <= 7 && 0 <= y && y <= 7);

                    if (pieces[x][y] != turn && temp != 1 && 0 <= x && x <= 7 && 0 <= y && y <= 7)
                    {
                        pieces[x][y] = 'o';
                    }

                    if (k < 2)
                    {
                        row--;
                    }
                    else if (k < 4)
                    {
                        column--;
                    }
                    else if (k < 6)
                    {
                        row++;
                    }
                    else
                    {
                        column++;
                    }
                }
            }
        }
    }
}

void PrintPieces(char pieces[8][8])
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            gotoxy(j, i);
            if (pieces[j][i] == 'B')
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 1);
                printf("%c", pieces[j][i]);
            }
            else if (pieces[j][i] == 'W')
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
                printf("%c", pieces[j][i]);
            }
            else
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 6);
                printf("%c", pieces[j][i]);
            }
        }
    }
}

int CheckTurn(char pieces[8][8], char turn)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            if (pieces[j][i] == 'o')
            {
                return 1;
            }
        }
    }
    return 0;
}

void timer(double *minutes, double *seconds, int x, int y, char turn)
{
    do
    {
        gotoxy(12, (turn == 'B') ? 2 : 3);
        printf("%.2d : %.2d", (int)(*minutes), (int)(*seconds));
        gotoxy(x, y);
        if ((*seconds) <= 0)
        {
            (*minutes)--;
            (*seconds) += 60;
        }

        (*seconds) -= 0.05;
        Sleep(40);
    } while (!kbhit() && ((*minutes) != 0 || (*seconds) > 0));
}

void CopyPieces(char pieces[8][8], char copy[8][8])
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            copy[j][i] = pieces[j][i];
        }
    }
}

int NewGame()
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    gotoxy(0, 1);
    printf("1.Classic Mode");
    gotoxy(4.5, 1);
    printf("2.Timer Mode");

    double x1 = 0;
    gotoxy(x1, 1);
    char movement1;
    do
    {
        movement1 = getch();

        if (movement1 == Right && x1 < 4.5)
        {
            gotoxy(x1 += 4.5, 1);
        }
        else if (movement1 == Left && 0 < x1)
        {
            gotoxy(x1 -= 4.5, 1);
        }

    } while (movement1 != '\r');

    int MODE = x1;
    double minutes1;
    double seconds1;
    if (MODE)
    {
        gotoxy(2.25, 2);
        printf("Game Time: ");
        scanf("%lf", &minutes1);
        gotoxy(5.5, 2);
        printf(" : ");
        scanf("%lf", &seconds1);
        getchar();
    }
    double minutes2 = minutes1;
    double seconds2 = seconds1;

    clear();

    char NamePlayer1[40];
    char NamePlayer2[40];

    gotoxy(1, 1);
    printf("Name Player One: \n");
    gotoxy(1, 2);
    printf("Name Player Two: ");

    gotoxy(5.25, 1);
    scanf("%[^\n]", NamePlayer1);
    getchar();

    gotoxy(5.25, 2);
    scanf("%[^\n]", NamePlayer2);
    clear();

    printf("\n\n\n");
    printf("\t\t\t\t\t    A   B   C   D   E   F   G   H  \n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t1 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t2 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t3 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t4 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t5 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t6 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t7 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t8 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n");

    //-------------------------------------------------------------------

    SCORE players[2];
    players[0].Score = 0;
    players[1].Score = 0;

    players[0].NumOfPieces = 0;
    players[0].NumOfPieces += 2;

    players[1].NumOfPieces = 0;
    players[1].NumOfPieces += 2;

    gotoxy(11, 0);
    printf("B : %d ", players[0].NumOfPieces);
    gotoxy(11, 1);
    printf("W : %d ", players[1].NumOfPieces);

    //-------------------------------------------------------------------

    char pieces[8][8];
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            pieces[j][i] = ' ';
        }
    }

    //-------------------------------------------------------------------

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 1);
    gotoxy(4, 3);
    pieces[4][3] = 'B';
    printf("%c", pieces[4][3]);

    gotoxy(3, 4);
    pieces[3][4] = 'B';
    printf("%c", pieces[3][4]);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
    gotoxy(3, 3);
    pieces[3][3] = 'W';
    printf("%c", pieces[3][3]);

    gotoxy(4, 4);
    pieces[4][4] = 'W';
    printf("%c", pieces[4][4]);

    //-------------------------------------------------------------------

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 6);
    gotoxy(3, 2);
    pieces[3][2] = 'o';
    printf("%c", pieces[3][2]);

    gotoxy(2, 3);
    pieces[2][3] = 'o';
    printf("%c", pieces[2][3]);

    gotoxy(5, 4);
    pieces[5][4] = 'o';
    printf("%c", pieces[5][4]);

    gotoxy(4, 5);
    pieces[4][5] = 'o';
    printf("%c", pieces[4][5]);

    gotoxy(11, -1);
    printf("Turn B");

    //-------------------------------------------------------------------

    if (MODE)
    {
        gotoxy(11, 2);
        printf("B : %.2d : %.2d", (int)minutes1, (int)seconds1);

        gotoxy(11, 3);
        printf("W : %.2d : %.2d", (int)minutes2, (int)seconds2);
    }

    int x = 3, y = 2;
    gotoxy(x, y);

    char copy_B[8][8] = {0};
    char copy_W[8][8] = {0};

    char turn = 'B';
    char movement = '\0';
    do
    {
        if (MODE && movement != '\0')
        {
            timer((turn == 'B') ? &minutes1 : &minutes2, (turn == 'B') ? &seconds1 : &seconds2, x, y, turn);

            if (minutes1 == 0 && seconds1 <= 0)
            {
                gotoxy(11, 4);
                printf("Winer is W ' %s '", NamePlayer2);
                gotoxy(0, 8);
                return 0;
            }
            else if (minutes2 == 0 && seconds2 <= 0)
            {
                gotoxy(11, 4);
                printf("Winer is B ' %s '", NamePlayer1);
                gotoxy(0, 8);
                return 0;
            }
        }

        movement = getch();
        if (movement == Down && y < 7)
        {
            gotoxy(x, ++y);
        }
        else if (movement == Up && 0 < y)
        {
            gotoxy(x, --y);
        }
        else if (movement == Right && x < 7)
        {
            gotoxy(++x, y);
        }
        else if (movement == Left && 0 < x)
        {
            gotoxy(--x, y);
        }
        else if (MODE && (movement == Backspace))
        {
            gotoxy(11, 5);
            printf("Who has requested the game back?");
            gotoxy(11, 6);
            printf("1.B   2.W");
            gotoxy(11, 6);

            char movement2;
            double x2 = 11;
            do
            {
                movement2 = getch();

                if (movement2 == Right && x2 < 12.5)
                {
                    gotoxy(x2 += 1.5, 6);
                }
                else if (movement2 == Left && 11 < x2)
                {
                    gotoxy(x2 -= 1.5, 6);
                }

            } while (movement2 != '\r');

            char RequestBack;
            RequestBack = (x2 == 11) ? 'B' : 'W';

            if (RequestBack == 'B')
            {
                turn = 'B';
                CopyPieces(copy_B, pieces);
                PrintPieces(pieces);
            }
            else if (RequestBack == 'W')
            {
                turn = 'W';
                CopyPieces(copy_W, pieces);
                PrintPieces(pieces);
            }
        }
        else if (movement == '\r' && pieces[x][y] != 'o')
        {
            gotoxy(11, 4);
            printf("You can't");
            gotoxy(x, y);
            Sleep(750);
            gotoxy(11, 4);
            printf("         ");
            gotoxy(x, y);
        }

        //-------------------------------------------------------------------

        else if (movement == '\r' && pieces[x][y] == 'o')
        {
            if (turn == 'B')
            {
                if (MODE)
                {
                    CopyPieces(pieces, copy_B);
                }

                pieces[x][y] = 'B';
                turn = 'W';
            }
            else if (turn == 'W')
            {
                if (MODE)
                {
                    CopyPieces(pieces, copy_W);
                }

                pieces[x][y] = 'W';
                turn = 'B';
            }

            int ScoreMove = RotatePieces_Score(pieces, x, y);
            players[(turn == 'B') ? 1 : 0].Score += ScoreMove;

            players[(turn == 'B') ? 1 : 0].NumOfPieces += ScoreMove + 1;
            players[(turn == 'B') ? 0 : 1].NumOfPieces -= ScoreMove;

            gotoxy(11, 0);
            printf("B : %d ", players[0].NumOfPieces);
            gotoxy(11, 1);
            printf("W : %d ", players[1].NumOfPieces);

            LegalMoves(pieces, turn);

            if (CheckTurn(pieces, turn))
            {
                gotoxy(11, -1);
                printf("Turn %c", turn);

                PrintPieces(pieces);
            }
            else
            {
                turn = (turn == 'B') ? 'W' : 'B';

                LegalMoves(pieces, turn);

                gotoxy(11, -1);
                printf("Turn %c", turn);

                PrintPieces(pieces);

                if (!CheckTurn(pieces, turn))
                {
                    char DiscWiner = (players[0].NumOfPieces > players[1].NumOfPieces) ? 'B' : 'W';

                    char NameWiner[40];
                    strcpy(NameWiner, (players[0].NumOfPieces > players[1].NumOfPieces) ? NamePlayer1 : NamePlayer2);

                    gotoxy(11, 4);
                    printf("Winer is %c ' %s '", DiscWiner, NameWiner);
                    gotoxy(0, 8);
                    return 0;
                }
            }

            gotoxy(x, y);
        }

    } while (movement != Esc);

    gotoxy(0, 8);
    return 0;
}