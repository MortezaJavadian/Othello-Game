#include <stdio.h>
#include <windows.h>
#include <conio.h>
#include <string.h>

#define Up 72
#define Down 80
#define Left 75
#define Right 77
#define Esc 27
#define Backspace 8

struct GameInfo
{
    char NamePlayer[2][40];
    char pieces[8][8];
    int x;
    int y;
    char turn;
    int NumOfPieces[2];
    int score[2];
    double MODE;
    int minutes[2];
    double seconds[2];
    int RequestBack;
    int NumOfRequest[2];
    double TempTime[2][2];
    struct GameInfo *copy[2];
};

typedef struct GameInfo info;

void clear()
{
    system("cls");
}

void gotoxy(double x, double y)
{
    COORD coord;
    coord.X = 4 * x + 44;
    coord.Y = 2 * y + 5;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

int RotatePieces_Score(char pieces[8][8], int j, int i)
{
    int score = 0;

    char turn = pieces[j][i];
    char opponent = (turn == 'B') ? 'W' : 'B';

    int row = 1;
    int column = 1;
    for (int k = 0; k < 8; k++)
    {
        int x = j;
        int y = i;
        int temp = 0;
        do
        {
            x += row;
            y += column;
            temp++;

        } while (pieces[x][y] == opponent && 0 <= x && x <= 7 && 0 <= y && y <= 7);

        if (pieces[x][y] == turn && temp != 1 && 0 <= x && x <= 7 && 0 <= y && y <= 7)
        {
            x -= row;
            y -= column;
            do
            {
                pieces[x][y] = turn;
                score++;
                x -= row;
                y -= column;

            } while (pieces[x][y] == opponent);
        }

        if (k < 2)
        {
            row--;
        }
        else if (k < 4)
        {
            column--;
        }
        else if (k < 6)
        {
            row++;
        }
        else
        {
            column++;
        }
    }

    return score;
}

void LegalMoves(char pieces[8][8], char turn)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            if (pieces[j][i] == 'o')
            {
                pieces[j][i] = ' ';
            }
        }
    }
    char opponent = (turn == 'B') ? 'W' : 'B';
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            if (pieces[j][i] == turn)
            {
                int row = 1;
                int column = 1;

                for (int k = 0; k < 8; k++)
                {
                    int x = j;
                    int y = i;
                    int temp = 0;
                    do
                    {
                        x += row;
                        y += column;
                        temp++;

                    } while (pieces[x][y] == opponent && 0 <= x && x <= 7 && 0 <= y && y <= 7);

                    if (pieces[x][y] != turn && temp != 1 && 0 <= x && x <= 7 && 0 <= y && y <= 7)
                    {
                        pieces[x][y] = 'o';
                    }

                    if (k < 2)
                    {
                        row--;
                    }
                    else if (k < 4)
                    {
                        column--;
                    }
                    else if (k < 6)
                    {
                        row++;
                    }
                    else
                    {
                        column++;
                    }
                }
            }
        }
    }
}

void PrintInfo(info *GameInfo)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            gotoxy(j, i);
            if (GameInfo->pieces[j][i] == 'B')
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 1);
                printf("%c", GameInfo->pieces[j][i]);
            }
            else if (GameInfo->pieces[j][i] == 'W')
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
                printf("%c", GameInfo->pieces[j][i]);
            }
            else
            {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 6);
                printf("%c", GameInfo->pieces[j][i]);
            }
        }
    }

    gotoxy(11, -1);
    printf("Turn %c", GameInfo->turn);

    gotoxy(11, 0);
    printf("B : %d ", GameInfo->NumOfPieces[0]);
    gotoxy(11, 1);
    printf("W : %d ", GameInfo->NumOfPieces[1]);

    if (GameInfo->MODE)
    {
        gotoxy(11, 2);
        printf("B : %.2d : %.2d", GameInfo->minutes[0], (int)GameInfo->seconds[0]);

        gotoxy(11, 3);
        printf("W : %.2d : %.2d", GameInfo->minutes[1], (int)GameInfo->seconds[1]);
    }

    gotoxy(GameInfo->x, GameInfo->y);
}

int CheckTurn(char pieces[8][8], char turn)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            if (pieces[j][i] == 'o')
            {
                return 1;
            }
        }
    }
    return 0;
}

void timer(info *GameInfo)
{
    int turn = (GameInfo->turn == 'B') ? 0 : 1;
    do
    {
        gotoxy(12, turn + 2);
        printf("%.2d : %.2d", GameInfo->minutes[turn], (int)GameInfo->seconds[turn]);
        gotoxy(GameInfo->x, GameInfo->y);

        if (GameInfo->seconds[turn] <= 0)
        {
            GameInfo->minutes[turn]--;
            GameInfo->seconds[turn] += 60;
        }

        GameInfo->seconds[turn] -= 0.05;
        Sleep(40);

    } while (!kbhit() && (GameInfo->minutes[turn] >= 0 || GameInfo->seconds[turn] >= 0));
}

void CopyInfo(info *GameInfo)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->pieces[j][i] = GameInfo->pieces[j][i];
        }
    }

    GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->x = GameInfo->x;
    GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->y = GameInfo->y;

    GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->turn = GameInfo->turn;

    for (int i = 0; i < 2; i++)
    {
        GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->NumOfPieces[i] = GameInfo->NumOfPieces[i];
        GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->score[i] = GameInfo->score[i];

        GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->minutes[i] = GameInfo->TempTime[i][0];
        GameInfo->copy[(GameInfo->turn == 'B') ? 0 : 1]->seconds[i] = GameInfo->TempTime[i][1];
    }
}

void CopyTime(info *GameInfo)
{
    for (int i = 0; i < 2; i++)
    {
        GameInfo->TempTime[i][0] = GameInfo->minutes[i];
        GameInfo->TempTime[i][1] = GameInfo->seconds[i];
    }
}

void PasteInfo(info *GameInfo)
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            GameInfo->pieces[j][i] = GameInfo->copy[GameInfo->RequestBack]->pieces[j][i];
        }
    }

    GameInfo->x = GameInfo->copy[GameInfo->RequestBack]->x;
    GameInfo->y = GameInfo->copy[GameInfo->RequestBack]->y;

    GameInfo->turn = GameInfo->copy[GameInfo->RequestBack]->turn;

    int DiffMinutes[2];
    double DiffSeconds[2];
    for (int i = 0; i < 2; i++)
    {
        if (GameInfo->NumOfRequest[GameInfo->RequestBack] == 2)
        {
            if (GameInfo->seconds[i] <= GameInfo->copy[GameInfo->RequestBack]->seconds[i])
            {
                DiffMinutes[i] = GameInfo->copy[GameInfo->RequestBack]->minutes[i] - GameInfo->minutes[i];
                DiffSeconds[i] = GameInfo->copy[GameInfo->RequestBack]->seconds[i] - GameInfo->seconds[i];
            }
            else
            {
                GameInfo->copy[GameInfo->RequestBack]->minutes[i]--;
                GameInfo->copy[GameInfo->RequestBack]->seconds[i] += 60;

                DiffMinutes[i] = GameInfo->copy[GameInfo->RequestBack]->minutes[i] - GameInfo->minutes[i];
                DiffSeconds[i] = GameInfo->copy[GameInfo->RequestBack]->seconds[i] - GameInfo->seconds[i];
            }
        }

        GameInfo->NumOfPieces[i] = GameInfo->copy[GameInfo->RequestBack]->NumOfPieces[i];
        GameInfo->score[i] = GameInfo->copy[GameInfo->RequestBack]->score[i];
        GameInfo->minutes[i] = GameInfo->copy[GameInfo->RequestBack]->minutes[i];
        GameInfo->seconds[i] = GameInfo->copy[GameInfo->RequestBack]->seconds[i];
    }

    if (GameInfo->NumOfRequest[GameInfo->RequestBack] == 1)
    {
        if (GameInfo->seconds[GameInfo->RequestBack] >= 30)
        {
            GameInfo->seconds[GameInfo->RequestBack] -= 30;
        }
        else
        {
            if (GameInfo->minutes[GameInfo->RequestBack] >= 1)
            {
                GameInfo->minutes[GameInfo->RequestBack]--;
                GameInfo->seconds[GameInfo->RequestBack] += 30;
            }
            else
            {
                GameInfo->seconds[GameInfo->RequestBack] = 0;
            }
        }
    }
    else if (GameInfo->NumOfRequest[GameInfo->RequestBack] == 2)
    {
        if (GameInfo->minutes[GameInfo->RequestBack] >= 1)
        {
            GameInfo->minutes[GameInfo->RequestBack]--;
        }
        else
        {
            GameInfo->seconds[GameInfo->RequestBack] = 0;
        }

        GameInfo->seconds[!(GameInfo->RequestBack)] += (DiffSeconds[0] + DiffSeconds[1]);
        GameInfo->minutes[!(GameInfo->RequestBack)] += (DiffMinutes[0] + DiffMinutes[1]);

        if (GameInfo->seconds[!(GameInfo->RequestBack)] >= 60)
        {
            GameInfo->seconds[!(GameInfo->RequestBack)] -= 60;
            GameInfo->minutes[!(GameInfo->RequestBack)]++;
        }
    }
}

int NewGame()
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);

    info GameInfo;
    info copy1;
    info copy2;

    GameInfo.copy[0] = &copy1;
    GameInfo.copy[1] = &copy2;

    gotoxy(0, 1);
    printf("1.Classic Mode");
    gotoxy(4.5, 1);
    printf("2.Timer Mode");

    GameInfo.MODE = 0;
    gotoxy(0, 1);
    char movement1;
    do
    {
        movement1 = getch();

        if (movement1 == Right && GameInfo.MODE < 4.5)
        {
            gotoxy(GameInfo.MODE += 4.5, 1);
        }
        else if (movement1 == Left && 0 < GameInfo.MODE)
        {
            gotoxy(GameInfo.MODE -= 4.5, 1);
        }

    } while (movement1 != '\r');

    if (GameInfo.MODE)
    {
        gotoxy(2.25, 2);
        printf("Game Time: ");
        scanf("%d", &GameInfo.minutes[0]);
        GameInfo.minutes[1] = GameInfo.minutes[0];

        gotoxy(5.5, 2);
        printf(" : ");
        scanf("%lf", &GameInfo.seconds[0]);
        GameInfo.seconds[1] = GameInfo.seconds[0];
    }

    getchar();
    clear();

    gotoxy(1, 1);
    printf("Name Player One: ");
    gotoxy(1, 2);
    printf("Name Player Two: ");

    gotoxy(5.25, 1);
    scanf("%[^\n]", &GameInfo.NamePlayer[0]);
    getchar();

    gotoxy(5.25, 2);
    scanf("%[^\n]", &GameInfo.NamePlayer[1]);
    clear();

    printf("\n\n\n");
    printf("\t\t\t\t\t    A   B   C   D   E   F   G   H  \n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t1 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t2 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t3 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t4 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t5 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t6 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t7 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n"
           "\t\t\t\t\t8 |   |   |   |   |   |   |   |   |\n"
           "\t\t\t\t\t  +---+---+---+---+---+---+---+---+\n");

    //-------------------------------------------------------------------

    GameInfo.score[0] = 0;
    GameInfo.score[1] = 0;

    GameInfo.NumOfPieces[0] = 2;
    GameInfo.NumOfPieces[1] = 2;

    GameInfo.NumOfRequest[0] = 0;
    GameInfo.NumOfRequest[1] = 0;

    //-------------------------------------------------------------------

    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            GameInfo.pieces[j][i] = ' ';
        }
    }

    //-------------------------------------------------------------------

    GameInfo.pieces[4][3] = 'B';
    GameInfo.pieces[3][4] = 'B';

    GameInfo.pieces[3][3] = 'W';
    GameInfo.pieces[4][4] = 'W';

    //-------------------------------------------------------------------

    GameInfo.pieces[3][2] = 'o';
    GameInfo.pieces[2][3] = 'o';
    GameInfo.pieces[5][4] = 'o';
    GameInfo.pieces[4][5] = 'o';

    //-------------------------------------------------------------------

    GameInfo.turn = 'B';

    //-------------------------------------------------------------------

    GameInfo.x = 3;
    GameInfo.y = 2;

    //-------------------------------------------------------------------

    PrintInfo(&GameInfo);

    //-------------------------------------------------------------------

    if (GameInfo.MODE)
    {
        CopyTime(&GameInfo);
    }

    //-------------------------------------------------------------------

    char movement = '\0';
    do
    {
        if (GameInfo.MODE && movement != '\0')
        {
            timer(&GameInfo);

            if (GameInfo.minutes[0] <= 0 && GameInfo.seconds[0] <= 0)
            {
                gotoxy(11, 4);
                printf("Winer is W ' %s '", GameInfo.NamePlayer[0]);
                gotoxy(0, 8);
                return 0;
            }
            else if (GameInfo.minutes[1] <= 0 && GameInfo.seconds[1] <= 0)
            {
                gotoxy(11, 4);
                printf("Winer is B ' %s '", GameInfo.NamePlayer[1]);
                gotoxy(0, 8);
                return 0;
            }
        }

        movement = getch();
        if (movement == Down && GameInfo.y < 7)
        {
            gotoxy(GameInfo.x, ++GameInfo.y);
        }
        else if (movement == Up && 0 < GameInfo.y)
        {
            gotoxy(GameInfo.x, --GameInfo.y);
        }
        else if (movement == Right && GameInfo.x < 7)
        {
            gotoxy(++GameInfo.x, GameInfo.y);
        }
        else if (movement == Left && 0 < GameInfo.x)
        {
            gotoxy(--GameInfo.x, GameInfo.y);
        }
        else if (movement == '\r' && GameInfo.pieces[GameInfo.x][GameInfo.y] != 'o')
        {
            gotoxy(11, 4);
            printf("You can't");
            gotoxy(GameInfo.x, GameInfo.y);
            Sleep(750);
            gotoxy(11, 4);
            printf("         ");
            gotoxy(GameInfo.x, GameInfo.y);
        }

        //-------------------------------------------------------------------

        else if (GameInfo.MODE && (movement == Backspace) && (GameInfo.NumOfRequest[0] != 2 || GameInfo.NumOfRequest[1] != 2))
        {
            gotoxy(11, 5);
            printf("Who has requested the game back?");
            gotoxy(11, 6);
            printf("1.B   2.W");
            gotoxy(11, 6);

            char movement2;
            double x2 = 11;
            do
            {
                movement2 = getch();

                if (movement2 == Right && x2 < 12.5)
                {
                    gotoxy(x2 += 1.5, 6);
                }
                else if (movement2 == Left && 11 < x2)
                {
                    gotoxy(x2 -= 1.5, 6);
                }

            } while (movement2 != '\r' || GameInfo.NumOfRequest[(x2 == 11) ? 0 : 1] == 2);

            gotoxy(11, 5);
            printf("                                ");
            gotoxy(11, 6);
            printf("         ");

            GameInfo.RequestBack = (x2 == 11) ? 0 : 1;

            GameInfo.NumOfRequest[GameInfo.RequestBack]++;

            PasteInfo(&GameInfo);
            CopyTime(&GameInfo);
            PrintInfo(&GameInfo);
        }

        //-------------------------------------------------------------------

        else if (movement == '\r' && GameInfo.pieces[GameInfo.x][GameInfo.y] == 'o')
        {
            if (GameInfo.turn == 'B')
            {
                if (GameInfo.MODE)
                {
                    CopyInfo(&GameInfo);
                }

                GameInfo.pieces[GameInfo.x][GameInfo.y] = 'B';
                GameInfo.turn = 'W';
            }
            else if (GameInfo.turn == 'W')
            {
                if (GameInfo.MODE)
                {
                    CopyInfo(&GameInfo);
                }

                GameInfo.pieces[GameInfo.x][GameInfo.y] = 'W';
                GameInfo.turn = 'B';
            }

            int ScoreMove = RotatePieces_Score(GameInfo.pieces, GameInfo.x, GameInfo.y);
            GameInfo.score[(GameInfo.turn == 'B') ? 1 : 0] += ScoreMove;

            GameInfo.NumOfPieces[(GameInfo.turn == 'B') ? 1 : 0] += ScoreMove + 1;
            GameInfo.NumOfPieces[(GameInfo.turn == 'B') ? 0 : 1] -= ScoreMove;

            LegalMoves(GameInfo.pieces, GameInfo.turn);

            if (GameInfo.MODE)
            {
                CopyTime(&GameInfo);
            }

            if (CheckTurn(GameInfo.pieces, GameInfo.turn))
            {
                PrintInfo(&GameInfo);
            }
            else
            {
                GameInfo.turn = (GameInfo.turn == 'B') ? 'W' : 'B';

                LegalMoves(GameInfo.pieces, GameInfo.turn);

                PrintInfo(&GameInfo);

                if (!CheckTurn(GameInfo.pieces, GameInfo.turn))
                {
                    char winer = (GameInfo.NumOfPieces[0] > GameInfo.NumOfPieces[1]) ? 'B' : 'W';

                    char NameWiner[40];
                    strcpy(NameWiner, (winer == 'B') ? GameInfo.NamePlayer[0] : GameInfo.NamePlayer[1]);

                    gotoxy(11, 4);
                    printf("Winer is %c ' %s '", winer, NameWiner);
                    gotoxy(0, 8);
                    return 0;
                }
            }
        }

    } while (movement != Esc);

    gotoxy(0, 8);
    return 0;
}